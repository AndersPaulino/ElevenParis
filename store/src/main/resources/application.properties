spring.jpa.database=postgresql
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true

#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=create-drop
#spring.jpa.hibernate.ddl-auto=create

spring.database.driverClassName=org.postgresql.Driver
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/elevenparis
spring.datasource.username=postgres
spring.datasource.password=postgres

server.port=8080

# Configurações do Keycloak
keycloak.realm=myrealm
keycloak.resource=myclient
keycloak.auth-server-url=http://localhost:8080/auth
keycloak.ssl-required=external
keycloak.credentials.secret=senha123.
keycloak.use-resource-role-mappings=true

# Configurações do Spring Security OAuth2
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8080/realms/myrealm
spring.security.oauth2.client.registration.keycloak.client-id=myclient
spring.security.oauth2.client.registration.keycloak.client-secret=senha123.
spring.security.oauth2.client.registration.keycloak.scope=openid, profile, email
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8080/realms/myrealm/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8080/realms/myrealm/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8080/realms/myrealm/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.end-session-uri=http://localhost:8080/realms/myrealm/protocol/openid-connect/logout
spring.security.oauth2.client.provider.keycloak.introspection-uri=http://localhost:8080/realms/myrealm/protocol/openid-connect/token/introspect
